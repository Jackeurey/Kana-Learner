#lang racket
(require racket/vector)
(require racket/string)
(provide get-presets v-group k-group g-group s-group z-group) 
(define-namespace-anchor a)
(define ns (namespace-anchor->namespace a))

;  Monographs --------------------------------------------------------------------------------------
(define (v-group) #((あ a) (い i) (う u) (え e) (お o)))
(define (k-group) #((か ka) (き ki) (く ku) (け ke) (こ ko)))
(define (s-group) #((さ sa) (し shi) (す su) (せ se) (そ so)))
(define (t-group) #((た ta) (ち chi) (つ tsu) (て te) (と to)))
(define (n-group) #((な na) (に ni) (ぬ nu) (ね ne) (の no )))
(define (h-group) #((は ha) (ひ hi) (ふ fu) (へ he) (ほ ho)))
(define (m-group) #((ま ma) (み mi) (む mu) (め me) (も mo)))
(define (y-group) #((や ya) (ゆ yu) (よ yo)))
(define (r-group) #((ら ra) (り ri) (る ru) (れ re) (ろ ro )))
(define (w-group) #((わ wa) (を wo)))
(define (nn-group) #((ん n)))
; Mono Slides ---------------------------------------------------------------------------------------
(define (sk-group) #((きゃ kya) (きゅ kyu) (きょ kyo)))
(define (ss-group) #((しゃ sha) (しゅ shu) (しょ sho)))
(define (st-group) #((ちゃ cha) (ちゅ chu) (ちょ cho)))
(define (sn-group) #((にゃ nya) (にゅ nyu) (にょ nyo)))
(define (sh-group) #((ひゃ hya) (ひゅ hyu) (ひょ hyo)))
(define (sm-group) #((みゃ mya) (みゅ myu) (みょ myo)))
(define (sr-group) #((りゃ rya) (りゅ ryu) (りょ ryo)))

; Dia Slides ---------------------------------------------------------------------------------------
(define (sg-group) #((ぎゃ gya) (ぎゅ gyu) (ぎょ gyo)))
(define (sz-group) #((じゃ ja) (じゅ ju) (じょ jo)))
(define (sb-group) #((びゃ bya) (びゅ byu) (びょ byo)))
(define (sp-group) #((ぴゃ pya) (ぴゅ pyu) (ぴょ pyo)))

; Diacritics ---------------------------------------------------------------------------------------
(define (g-group) #((が ga) (ぎ gi ) (ぐ gu) (げ ge) (ご go)))
(define (z-group) #((ざ za) (じ ji) (ず zu) (ぜ ze) (ぞ zo)))
(define (d-group) #((だ da) (ぢ di) (づ du) (で de) (ど do)))
(define (b-group) #((ば ba) (び bi) (ぶ bu) (べ be) (ぼ bo)))
(define (p-group) #((ぱ pa) (ぴ pi) (ぷ pu) (ぺ pe) (ぽ po)))



(define monographs '(v k s t n h m y r s w nn)) 
(define diacritics '(g z d b p))
(define mono-slides '(sk ss st sn sh sm sr))
(define dia-slides '(sg sz sb sp))
(define all (append monographs diacritics mono-slides dia-slides))

(define presets (hash "Monographs" monographs
                      "Diacritics" diacritics
                      "Monograph Slides" mono-slides
                      "Diacritic Slides" dia-slides
                      "All" all))

(define (get-presets key)
  (random-kana (hash-ref presets key)))

; Takes a list of symbols, appends said list of symbols with "-group" and then evaluates them with
;vector-append as their operator
(define (learning-set args)
  (eval `(vector-append
          ,@(for/list ([i args])
              `(,(string->symbol
                 (string-append
                  (symbol->string i)
                  "-group")))))
        ns))

(define (random-kana set)
  (let* ([vec (learning-set set)]
         [len (vector-length vec)])
    (λ () (vector-ref vec (random len)))))

(define (kana-or-sound kana)
  (define choice `#(,car ,cadr))
  ((vector-ref choice (random 2))
   kana))